"use strict";

process.env.BABEL_ENV = "development";
process.env.NODE_ENV = "development";

const fs = require("fs");

const {log} = console;
const chalk = require("react-dev-utils/chalk");

const webpack = require("webpack");
const WebpackDevServer = require("webpack-dev-server");
const {
  choosePort,
  createCompiler,
  prepareProxy,
  prepareUrls,
} = require("react-dev-utils/WebpackDevServerUtils");

const openBrowser = require("react-dev-utils/openBrowser");
const {checkBrowsers} = require("react-dev-utils/browsersHelper");
const paths = require("./config/paths");
const configFactory = require("./config/webpack.config");
const createDevServerConfig = require("./config/webpackDevServer.config");

const {checkClientFiles, dotenv} = require(paths.utils);

const useYarn = fs.existsSync(paths.yarnLockFile);
const isInteractive = process.stdout.isTTY;

module.exports = async (client) => {
  await checkClientFiles(client, "local");

  const dotenvData = dotenv(client, "local");
  const env = dotenvData.raw;
  // Start Webpack Dev Server
  const HOST = env.HOST || "0.0.0.0";
  const PORT = parseInt(env.PORT, 10) || 3001;

  checkBrowsers(paths.appPath, isInteractive)
    .then(() => {
      return choosePort(HOST, PORT);
    })
    .then((port) => {
      if (port == null) {
        return;
      }

      const config = configFactory(client, "local", dotenvData);
      const protocol = env.HTTPS === "true" ? "https" : "http";
      const appName = require(paths.packageJson).name;
      const urls = prepareUrls(protocol, HOST, port);
      // Create a webpack compiler that is configured with custom messages.
      const compiler = createCompiler({
        webpack,
        config,
        appName,
        urls,
        useYarn,
      });
      // Load proxy config
      const proxySetting = require(paths.packageJson).proxy;
      const proxyConfig = prepareProxy(proxySetting, paths.appPublic);
      // Serve webpack assets generated by the compiler over a web server.
      const serverConfig = createDevServerConfig(
        client,
        proxyConfig,
        urls.lanUrlForConfig,
      );
      const devServer = new WebpackDevServer(compiler, serverConfig);

      // Launch WebpackDevServer.
      devServer.listen(port, HOST, (err) => {
        if (err) {
          throw new Error(err);
        }
        log(chalk.green("Launching Local Lunchbox Development Server..."));
        log(chalk.cyan(`Listening on port ${port}!\n`));
        openBrowser(urls.localUrlForBrowser);
        return true;
      });

      ["SIGINT", "SIGTERM"].forEach((sig) => {
        process.on(sig, function () {
          devServer.close();
          process.exit();
        });
      });
    });
};
